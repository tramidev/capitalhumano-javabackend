[1mdiff --git a/iot-api/src/main/java/com/sensormanager/iot/controller/SensorDataController.java b/iot-api/src/main/java/com/sensormanager/iot/controller/SensorDataController.java[m
[1mindex 295743e..6eaa7f0 100644[m
[1m--- a/iot-api/src/main/java/com/sensormanager/iot/controller/SensorDataController.java[m
[1m+++ b/iot-api/src/main/java/com/sensormanager/iot/controller/SensorDataController.java[m
[36m@@ -2,12 +2,11 @@[m [mpackage com.sensormanager.iot.controller;[m
 [m
 import com.sensormanager.iot.dto.SensorDataDTO;[m
 import com.sensormanager.iot.dto.SensorJSONPackageDTO;[m
[31m-import com.sensormanager.iot.service.SensorDataService;[m
[32m+[m[32mimport com.sensormanager.iot.service.SensorDataServiceImp;[m
 import org.springframework.beans.factory.annotation.Autowired;[m
 import org.springframework.http.ResponseEntity;[m
 import org.springframework.web.bind.annotation.*;[m
[31m-import org.springframework.format.annotation.DateTimeFormat;[m
[31m-import java.time.LocalDateTime;[m
[32m+[m[32mimport org.springframework.web.server.ResponseStatusException;[m
 import org.springframework.http.HttpStatus;[m
 [m
 import java.util.List;[m
[36m@@ -16,45 +15,27 @@[m [mimport java.util.List;[m
 @RequestMapping("/api/v1/sensordata")[m
 public class SensorDataController {[m
 [m
[31m-    private final SensorDataService sensorDataService;[m
[32m+[m	[32m@Autowired[m
[32m+[m[32m    private SensorDataServiceImp sensorDataService;[m
 [m
[31m-    @Autowired[m
[31m-    public SensorDataController(SensorDataService sensorDataService) {[m
[31m-        this.sensorDataService = sensorDataService;[m
[31m-    }[m
[31m-[m
[31m-    // Obtener todos los datos de sensores[m
     @GetMapping[m
[31m-    public ResponseEntity<List<SensorDataDTO>> getAllSensorData() {[m
[31m-        List<SensorDataDTO> sensorDataList = sensorDataService.getAllSensorData();[m
[31m-        return ResponseEntity.ok(sensorDataList);[m
[31m-    }[m
[31m-[m
[31m-    // Obtener datos de un sensor por ID[m
[31m-    @GetMapping("/{id}")[m
[31m-    public ResponseEntity<SensorDataDTO> getSensorDataById(@PathVariable Long id) {[m
[31m-        SensorDataDTO sensorDataDTO = sensorDataService.getSensorDataById(id);[m
[31m-        return (sensorDataDTO != null) ? ResponseEntity.ok(sensorDataDTO) : ResponseEntity.notFound().build();[m
[32m+[m[32m    public ResponseEntity<List<SensorDataDTO>> getSensorData(@RequestParam("sensor_id") List<Long> sensorIds,[m
[32m+[m[41m    [m														[32m @RequestParam("from") Long fromEpoch,[m
[32m+[m												[32m             @RequestParam("to") Long toEpoch) {[m
[32m+[m[32m        List<SensorDataDTO> sensorDataList = sensorDataService.getSensorData(sensorIds, fromEpoch, toEpoch);[m
[32m+[m[32m        if(sensorDataList.size() == 0){[m
[32m+[m[32m            return ResponseEntity.status(HttpStatus.NO_CONTENT.value()).body(sensorDataList);[m
[32m+[m[32m        }[m
[32m+[m[32m        return ResponseEntity.status(HttpStatus.OK.value()).body(sensorDataList);[m
     }[m
 [m
[31m-    // Crear un nuevo registro de sensor[m
     @PostMapping[m
     public ResponseEntity<List<SensorDataDTO>> createSensorData(@RequestBody SensorJSONPackageDTO sensorDataDTO) {[m
         List<SensorDataDTO> createdSensorData = sensorDataService.createSensorData(sensorDataDTO);[m
[31m-        return ResponseEntity.ok(createdSensorData);[m
[31m-    }[m
[31m-[m
[31m-    // Actualizar datos de un sensor[m
[31m-    @PutMapping("/{id}")[m
[31m-    public ResponseEntity<SensorDataDTO> updateSensorData(@PathVariable Long id, @RequestBody SensorDataDTO sensorDataDTO) {[m
[31m-        SensorDataDTO updatedSensorData = sensorDataService.updateSensorData(id, sensorDataDTO);[m
[31m-        return (updatedSensorData != null) ? ResponseEntity.ok(updatedSensorData) : ResponseEntity.notFound().build();[m
[31m-    }[m
[31m-[m
[31m-    // Eliminar un registro de sensor[m
[31m-    @DeleteMapping("/{id}")[m
[31m-    public ResponseEntity<Void> deleteSensorData(@PathVariable Long id) {[m
[31m-        sensorDataService.deleteSensorData(id);[m
[31m-        return ResponseEntity.noContent().build();[m
[32m+[m[32m        if(createdSensorData == null || createdSensorData.size() == 0){[m
[32m+[m[41m        [m	[32mthrow new ResponseStatusException(HttpStatus.BAD_REQUEST, "The data was not inserted.");[m
[32m+[m[32m        }[m
[32m+[m[32m        return ResponseEntity.status(HttpStatus.CREATED.value()).body(createdSensorData);[m
     }[m
[32m+[m[41m    [m
 }[m
\ No newline at end of file[m
